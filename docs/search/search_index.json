{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My_Package This is a demonstration site created to see how MkDocs works.","title":"Start"},{"location":"#my_package","text":"This is a demonstration site created to see how MkDocs works.","title":"My_Package"},{"location":"api/","text":"This is api documentation of my package Date 10-11-2021 This code is part of a package created for a course Note: This code is copied from my previous written code you can find that code from the below given GitHub link: https://github.com/AmanRathoreM/All-in-Python/blob/11f8b50360a587ac133021cf6f87c445734e0a52/Tutorials/Python%20Object%20Oriented%20Programming/Revision%20of%20OOP/tutorial_70_2.py Employee return_email property writable Returns email of the person Parameters: Name Type Description Default mail str enter the domain of the email. Defaults to \"gmail\". required Returns: Type Description str Full Email address of the person. __add__ ( self , other ) special adds the salary of 2 Employees Parameters: Name Type Description Default other Employee object object of the second person whose salary you want to add. required Returns: Type Description float Sum of the salaries of two employees. Source code in my_package\\employee_class.py def __add__ ( self , other ) -> typing . SupportsFloat : '''adds the salary of 2 Employees Args: other (Employee object): object of the second person whose salary you want to add. Returns: float: Sum of the salaries of two employees. ''' return f \"Sum of { self . name } \\' s and { other . name } \\' s salary is { self . salary + other . salary } \" __init__ ( self , name = 'Unknown' , salary = 0.0 , number_of_leaves = 0 ) special This is a constructor of class Employee which helps to manage Employees information Parameters: Name Type Description Default name str Enter the name of the employee here. Defaults to \"Unknown\". 'Unknown' salary float Enter the salary of the employee here. Defaults to 0.0. 0.0 number_of_leaves int Enter the number of leaves taken by the employee here. Defaults to 0. 0 Exceptions: Type Description Warning If salary is not a float Source code in my_package\\employee_class.py def __init__ ( self , name = \"Unknown\" , salary = 0.0 , number_of_leaves = 0 ): '''This is a constructor of class Employee which helps to manage Employees information Args: name (str, optional): Enter the name of the employee here. Defaults to \"Unknown\". salary (float, optional): Enter the salary of the employee here. Defaults to 0.0. number_of_leaves (int, optional): Enter the number of leaves taken by the employee here. Defaults to 0. Raises: Warning: If salary is not a float ''' if not ( isinstance ( salary , float )): raise Warning ( 'salary must be a float' ) self . number_of_leaves = int ( number_of_leaves ) self . name = name self . salary = float ( salary ) change_leaves ( leave = 2 ) classmethod Changes the number of leaves employee has Parameters: Name Type Description Default leave int Number of leaves employee will have after changing. Defaults to 2. 2 Source code in my_package\\employee_class.py @classmethod def change_leaves ( cls , leave : int = 2 ): '''Changes the number of leaves employee has Args: leave (int, optional): Number of leaves employee will have after changing. Defaults to 2. ''' cls . number_of_leaves = leave print_details ( self ) Print all the details of the employee. Source code in my_package\\employee_class.py def print_details ( self ) -> None : '''Print all the details of the employee. ''' print ( f \"Name is { self . name } \\n Salary is { self . salary } \\n Number of leaves left are { self . number_of_leaves } \\n Email is { self . return_email } \" )","title":"API"},{"location":"api/#this-is-api-documentation-of-my-package","text":"Date 10-11-2021 This code is part of a package created for a course Note: This code is copied from my previous written code you can find that code from the below given GitHub link: https://github.com/AmanRathoreM/All-in-Python/blob/11f8b50360a587ac133021cf6f87c445734e0a52/Tutorials/Python%20Object%20Oriented%20Programming/Revision%20of%20OOP/tutorial_70_2.py","title":"This is api documentation of my package"},{"location":"api/#my_package.Employee_class.Employee","text":"","title":"Employee"},{"location":"api/#my_package.Employee_class.Employee.return_email","text":"Returns email of the person Parameters: Name Type Description Default mail str enter the domain of the email. Defaults to \"gmail\". required Returns: Type Description str Full Email address of the person.","title":"return_email"},{"location":"api/#my_package.Employee_class.Employee.__add__","text":"adds the salary of 2 Employees Parameters: Name Type Description Default other Employee object object of the second person whose salary you want to add. required Returns: Type Description float Sum of the salaries of two employees. Source code in my_package\\employee_class.py def __add__ ( self , other ) -> typing . SupportsFloat : '''adds the salary of 2 Employees Args: other (Employee object): object of the second person whose salary you want to add. Returns: float: Sum of the salaries of two employees. ''' return f \"Sum of { self . name } \\' s and { other . name } \\' s salary is { self . salary + other . salary } \"","title":"__add__()"},{"location":"api/#my_package.Employee_class.Employee.__init__","text":"This is a constructor of class Employee which helps to manage Employees information Parameters: Name Type Description Default name str Enter the name of the employee here. Defaults to \"Unknown\". 'Unknown' salary float Enter the salary of the employee here. Defaults to 0.0. 0.0 number_of_leaves int Enter the number of leaves taken by the employee here. Defaults to 0. 0 Exceptions: Type Description Warning If salary is not a float Source code in my_package\\employee_class.py def __init__ ( self , name = \"Unknown\" , salary = 0.0 , number_of_leaves = 0 ): '''This is a constructor of class Employee which helps to manage Employees information Args: name (str, optional): Enter the name of the employee here. Defaults to \"Unknown\". salary (float, optional): Enter the salary of the employee here. Defaults to 0.0. number_of_leaves (int, optional): Enter the number of leaves taken by the employee here. Defaults to 0. Raises: Warning: If salary is not a float ''' if not ( isinstance ( salary , float )): raise Warning ( 'salary must be a float' ) self . number_of_leaves = int ( number_of_leaves ) self . name = name self . salary = float ( salary )","title":"__init__()"},{"location":"api/#my_package.Employee_class.Employee.change_leaves","text":"Changes the number of leaves employee has Parameters: Name Type Description Default leave int Number of leaves employee will have after changing. Defaults to 2. 2 Source code in my_package\\employee_class.py @classmethod def change_leaves ( cls , leave : int = 2 ): '''Changes the number of leaves employee has Args: leave (int, optional): Number of leaves employee will have after changing. Defaults to 2. ''' cls . number_of_leaves = leave","title":"change_leaves()"},{"location":"api/#my_package.Employee_class.Employee.print_details","text":"Print all the details of the employee. Source code in my_package\\employee_class.py def print_details ( self ) -> None : '''Print all the details of the employee. ''' print ( f \"Name is { self . name } \\n Salary is { self . salary } \\n Number of leaves left are { self . number_of_leaves } \\n Email is { self . return_email } \" )","title":"print_details()"}]}